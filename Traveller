package cmsc22.final_project;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.HashMap;

/**
 * The Traveller class represents the user in the game. 
 * It has methods for managing the user's dabloons and inventory, and for interacting with the game, 
 * and because of that, the inner class Merchant was appended in the Traveller class. Edited for test web 126
 */
public class Traveller{	
	// Instantiated fields
    protected static String userName;
	private int startingDabloons;
	private int dabloonWallet;
	private static Scanner scan = new Scanner(System.in);
	private Map<String, Integer> userInventory;
	
	
	// Constructor sets up the initial state of the user; their inventory 
	public Traveller () {
	    // Create the user's inventory
	    userInventory = new HashMap<>();
	}
	
	
	public static void setName(String n) {
		userName = n;
	}
	
	public static String getName()   
    {  
        return userName;  
    }  

	public void setDabloons(int dabloonWallet) {
		this.dabloonWallet = dabloonWallet;
	}
	
	public int getDabloons(){
		return dabloonWallet;
	}
	
	// Generates a random number of dabloons and adds them to the user's dabloon wallet
	public int randomizeNumber() {
		Random randomDabloons = new Random(); 
		startingDabloons = randomDabloons.nextInt(1, 100); 
		System.out.println("Here have this "+ startingDabloons + " dabloons to start your journey.");
		int dabloonWallet = startingDabloons;
		return dabloonWallet;	
	}
	
	/**
	 * The Merchant class represents the merchant in the game. 
	 * It allows the user to view and purchase items and updates their inventory and dabloon wallet accordingly.
	 */
	public class Merchant {
		
		/**
		* Converts user input string to an integer, or returns a default value if input is invalid.
		* 
		* @param answer user input string to be parsed
		* @return integer value of input string, or default value if input is invalid
		*/
		public int parseAnswer (String answer) {
		    try {
		    	    int integerAnswer = Integer.parseInt(answer);
				    return integerAnswer;
				} catch (NumberFormatException e) {
				    System.out.println("Invalid number format");
				    return 6;
				}
		}
		
		public void inventoryPresenter () {
			System.out.println("\nYour inventory: ");
		    for (Map.Entry<String, Integer> entry : userInventory.entrySet()) {
	            String key = entry.getKey();
	            int value = entry.getValue();
	            System.out.printf(" %-10s - %3dx\n", key, value);
	        } 
		}
		
		/**
		* This method lets the user interact with the merchant and make purchases. The user can view a list of items for sale and choose an item to buy.
		* The method updates the user's inventory and dabloon wallet to reflect the purchases.
		* 
		* @param dabloonWallet the current number of dabloons the user has
		* @return the updated number of dabloons after making purchases
		*/
		public int sell(int dabloonWallet) {
		    System.out.println("\n########################################################################################"
					+ "\nEncountered a shop along the way..");
			Boolean isBuying = true;
			
			while(isBuying == true) {
			    System.out.println("\nWELCOME TO THE SHOP"
						+ "\nAttendant: What item would you like to buy? We have a few..."
						+ "\nItems for sale: "
						+ "\n[1]Water     --- 10 dabloons\n[2]Map       --- 15 dabloons"
						+ "\n[3]Torch     --- 40 dabloons\n[4]Blanket   --- 80 dabloons\n[5]Tent      --- 200 dabloons"
						+ "\n(Enter designated number to buy the item, any other key to leave.)");
				inventoryPresenter();
				System.out.println("\nWallet: " + dabloonWallet
						+"(\nEnter designated number to buy the item, any other key to leave)");
				String answer = scan.nextLine();
				int parsedAnswer = parseAnswer(answer);

				if (dabloonWallet < 10) {
				    System.out.println("You don't have enough amount of dabloons left to buy anything");
					continue;
				}
				else if(parsedAnswer == 1 ) {
					System.out.println("\nWater is added to inventory.");
					// Add the item to the user's inventory
					int quantity = userInventory.getOrDefault("water", 0);
					userInventory.put("water", quantity + 1);
					dabloonWallet -= 10;
				}
				else if(parsedAnswer == 2 ) {
					System.out.println("\nMap is added to inventory.");
					// Add the item to the user's inventory
			        int quantity = userInventory.getOrDefault("map", 0);
			        userInventory.put("map", quantity + 1);
					dabloonWallet -= 15;
				}
				else if(parsedAnswer == 3 ) {
					System.out.println("\nTorch is added to inventory.");
					// Add the item to the user's inventory
			        int quantity = userInventory.getOrDefault("torch", 0);
			        userInventory.put("torch", quantity + 1);
					dabloonWallet -= 40;
				}
				else if(parsedAnswer == 4 ) {
					System.out.println("\nBlanket is added to inventory.");
					// Add the item to the user's inventory
			        int quantity = userInventory.getOrDefault("blanket", 0);
			        userInventory.put("blanket", quantity + 1);
					dabloonWallet -= 80;
				}
				else if(parsedAnswer == 5 ) {
					System.out.println("\nTent is added to inventory.");
					// Add the item to the user's inventory
			        int quantity = userInventory.getOrDefault("tent", 0);
			        userInventory.put("tent", quantity + 1);
					dabloonWallet -= 200;
				}
				else {
					System.out.println("You left the shop.");
					isBuying = false;
				}
			}
			return dabloonWallet;
		}
	}
}

